# Published on https://github.com/Young-Lord/Image2Cursors under WTFPL

# Credit to:
# https://blog.csdn.net/qq_41172785/article/details/89063164
# https://aurora0x27.github.io/2024/08/22/WinCursor2Linux/index.html
# https://develop.kde.org/docs/features/cursor (detailed tutorial)
# https://github.com/isaacrobinson2000/CursorCreate (use it to generate build.json!)
# https://github.com/drizt/xcursor-viewer (preview any cursors) (https://askubuntu.com/questions/1271133/how-can-i-preview-the-x11-cursor-file)

# Dependencies:
# System: sudo apt install x11-apps / sudo pacman -Syyu xorg-xcursorgen
# Python: Pillow

import os
from pathlib import Path
import json
from pprint import pprint
import shutil
import tarfile
import tempfile
from PIL import Image
import subprocess

INPUT_DIR = Path("input")
# For title, comments, edit input/build.json (you may use CursorCreate to generate it first)
SIZES = [12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72]
MANUAL_REFERS_TO_TABLE = {
    # non-exist resource in current theme: exist resource
    "circle": "not-allowed",
    "left_ptr": "default",
}
EXAMPLE_CURSORS_DIR = Path("/usr/share/icons/Oxygen_Blue/cursors")
# 用于作为模板，查看需要哪些符号链接。


def dbg_print(*args, **kwargs):
    # print(*args, **kwargs)
    pass


with open(INPUT_DIR / "build.json", "r") as f:
    data = json.load(f)

CURSORS_NAME = data["metadata"]["name"]
OUTPUT_DIR = Path("output")
# wipe output dir
shutil.rmtree(OUTPUT_DIR, ignore_errors=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)
CURSORS_ROOT_DIR = OUTPUT_DIR / CURSORS_NAME
CURSORS_ROOT_DIR.mkdir(parents=True, exist_ok=True)
METADATA_DIR = CURSORS_ROOT_DIR / "index.theme"
# write metadata
with open(METADATA_DIR, "w") as f:
    f.write(
        f"""[Icon Theme]
Name={CURSORS_NAME}
Comment={data["metadata"]["comment"]}
"""
    )
LICENSE_DIR = CURSORS_ROOT_DIR / "LICENSE.txt"
# write license
with open(LICENSE_DIR, "w") as f:
    f.write(data["metadata"]["licence"])


tmpdir = tempfile.TemporaryDirectory()
tmppath = Path(tmpdir.name)

CURSORS_DIR = CURSORS_ROOT_DIR / "cursors"
CURSORS_DIR.mkdir(parents=True, exist_ok=True)

NAME_TABLE: "dict[str,tuple[str,str,set[str]]]" = (
    {}
)  # name in config -> (major name, filename, all_names)
for cursor in data["data"]:
    cursor_name = cursor["cursor_name"]
    cursor_file = cursor["cursor_file"]
    NAME_TABLE[cursor_name] = (cursor_name, cursor_file, {cursor_name})
for non_exist, exist in MANUAL_REFERS_TO_TABLE.items():
    if exist in NAME_TABLE:
        NAME_TABLE[exist][2].add(non_exist)

# look for /usr/share/icons/Oxygen_Blue/cursors/ for soft-link examples
ALL_NON_SYMLINK_FILE_IN_EXAMPLE = set()
for _ in (1, 2): # 运行两次以确保 subnames 完整
    for cursor in EXAMPLE_CURSORS_DIR.iterdir():
        link, link_to = cursor.name, cursor.resolve().name
        if cursor.is_symlink():
            for name, (major_name, filename, subnames) in NAME_TABLE.items():
                # 感觉要出锅
                if link_to in subnames:
                    subnames.add(link)
                    break
                if link == major_name:
                    # set major name to link_to
                    NAME_TABLE[name] = (link_to, filename, subnames)
                    subnames.add(link_to)
                    break
        else:
            ALL_NON_SYMLINK_FILE_IN_EXAMPLE.add(cursor.name)
dbg_print(NAME_TABLE)

ALL_ADDED_NON_SYMLINK = set()
for cursor in data["data"]:
    cursor_major_name = NAME_TABLE[cursor["cursor_name"]][0]
    cursor_file = cursor["cursor_file"]
    hotspots_64: "list" = cursor["hotspots_64"]
    delays = cursor["delays"]

    lines = []
    # for gif: extract every image and save it; for png: save it directly
    frame = Image.open(INPUT_DIR / cursor_file)
    nframes = 0
    while frame:
        for size in SIZES:
            original_size = frame.size
            if "strip" in cursor:
                # added manually to handle non-square images
                strip = cursor["strip"]
                if strip == "down":
                    frame = frame.crop((0, 0, original_size[0], original_size[0]))
                elif strip == "right":
                    frame = frame.crop((0, 0, original_size[1], original_size[1]))
                else:
                    raise ValueError(strip)
                original_size = frame.size
            assert original_size[0] == original_size[1], (
                cursor_file,
                nframes,
                original_size,
            )
            frame1 = frame.resize((size, size))
            hotspot_index = nframes
            # first use hotspots_64, then hotspots_full (the latter is generated by manually analyzing)
            hotspot1 = (
                hotspots_64[nframes][0] * size // 64,
                hotspots_64[nframes][1] * size // 64,
            )
            if "hotspots_full" in cursor:
                hotspots_full = cursor["hotspots_full"]
                if len(hotspots_full) == 1 <= nframes:
                    # allow to use the first hotspot for all frames
                    hotspot_index = 0
                hotspot1 = (
                    hotspots_full[hotspot_index][0] * size // original_size[0],
                    hotspots_full[hotspot_index][1] * size // original_size[1],
                )
            filename = f"{cursor_major_name}_{size}_{nframes}.png"
            frame1.save(tmppath / filename)
            # <size> <xhot> <yhot> <filename> <ms-delay>
            lines.append(
                f"{size} {hotspot1[0]} {hotspot1[1]} {filename} {delays[nframes]}"
            )
        nframes += 1
        try:
            frame.seek(nframes)
        except EOFError:
            break
    # write xcursorgen config file
    config_path = tmppath / f"{cursor_major_name}.cursor"
    with open(config_path, "w") as f:
        f.write("\n".join(lines))
    # generate cursor
    subprocess.run(
        [
            "xcursorgen",
            config_path,
            "-p",
            tmppath,
            CURSORS_DIR / f"{cursor_major_name}",
        ],
        check=True,
    )
    ALL_ADDED_NON_SYMLINK.add(cursor_major_name)

# add symlinks
ALL_ADDED_SYMLINKS = set()
for _, (link_to, _, subnames) in NAME_TABLE.items():
    for subname in subnames:
        if subname == link_to:
            continue
        os.symlink(link_to, CURSORS_DIR / subname)
        ALL_ADDED_SYMLINKS.add(subname)
        dbg_print("Add symlink:", subname, "->", link_to)

# create tar file
tar_path = OUTPUT_DIR / f"{CURSORS_NAME}.tar.gz"
tar = tarfile.TarFile.open(tar_path, "w:gz")
tar.add(CURSORS_ROOT_DIR, arcname=CURSORS_NAME)

# add symlinks (in tar only)
# for link, (_,_,subnames) in NAME_TABLE.items():
#     for subname in subnames:
#         tarinfo = tarfile.TarInfo(name=f"{CURSORS_NAME}/cursors/{subname}")
#         tarinfo.type = tarfile.SYMTYPE
#         tarinfo.linkname = link
#         tar.addfile(tarinfo)
# print(tar.getnames())

tar.close()
# Warn for anything in SYMLINK_TABLE values but not in EXIST_CURSORS
for file in ALL_NON_SYMLINK_FILE_IN_EXAMPLE:
    if file not in ALL_ADDED_NON_SYMLINK and file not in ALL_ADDED_SYMLINKS:
        print(
            f"Warning: {file} is not in the cursor theme, but in the example cursor theme"
        )


def install_theme(root_path):
    theme_path = Path.home() / ".icons" / CURSORS_NAME
    shutil.rmtree(theme_path, ignore_errors=True)
    shutil.copytree(root_path, theme_path)
    print("Theme installed to:", theme_path)


# print("tmpdir:", tmppath)
tmpdir.cleanup()

print()
print()
print("Output to:", tar_path)
install_theme(CURSORS_ROOT_DIR)
